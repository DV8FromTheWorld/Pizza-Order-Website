<Student>
Store student information:
	Before you can store any information about an order, you need to first insert the information about
	the student that is ordering.
	INSERT INTO Student (bannerId, firstName, lastName, email, phoneNumber)	VALUES (...);
		All of these are super self-explanatory.
		The user MUST enter a phoneNumber. DB Only stores 10 characters. remove -'s
			IE: 704-995-0942  ->  7049950942.  Doublecheck proper formatting / required length for a phone number.
		If they chose to enter an email, then also enter it into
		the DB after checking to make sure it is a "valid" email. If no email is provided, just
		pass NULL. All of these are passed as Strings (VARCHAR) except for bannerId, which is an INT.
			I have a bit of Javascript that checks an email string to make sure it is "valid". 
			Code here: https://gist.github.com/DV8FromTheWorld/f1020a7efa7ba20f1a5c
		We might use this email for some kind of email-alert system? Not sure yet.
		
	You will need to hold on to the bannerId of the student because it will be used in the 
	insert statement to create a new Order.
	
	Remember to check if the Student already exists in the DB (if we chose to keep them).
</Student>

<Order>
Before creating a new order, check to see if there is an active order with the same bannerId.
If there is, inform the person ordering before placing a new order
	(There is an order going already, are you sure you want more pizza? (you fat fuck)).

To make and completely store an order:
	INSERT INTO Orders (timeOrdered, studentId) VALUES (phpsqltime, bannerId);
		I personally use date("Y-m-d H:i:s", $phptime) for my sql DATETIME inserts.
	
	When the Order is created, its total cost field is NULL. After all Order_Details are created
	the total cost will need to be totalled. The total might already be totalled by the javascript on 
	the page when it shows it to the user before confirming that they want to purchase.
	Perhaps use this value? Not exactly sure how this should be implemented. Use your own judgement.
	
	If it is delivery, you will need to get the ResidentHall id, either by querying the ResidenceHall
	table or having the indexies as constants in php (might be better?)
	
	After you create the order, you will need to retrieve its AUTO_INCREMENT generated id for
	later use in Order_Details.

<Pizza>
To insert pizza:

	If this is Custom Pizza, continue.  Else, jump down to "SPECIALTY PIZZA ORDERS"

	You will need to calculate the cost of the pizza based on size (base price) + topping amount.
		base 12in: 7.99  
		base 16in: 11.25
		
		topping 12in: 1.45 each
		topping 16in: 1.69 each
	INSERT INTO Pizza (cost) VALUES (...);
		pizzaId will AUTO_INCREMENT. You will need to retrieve this value after insert.
		name value will default to "Custom Pizza".
		inStock will default to TRUE.
	
	After insert, use pizzaId that was created by auto_increment to insert into Pizza_Toppings table.
	You will need to have an list of the proper sql indexes for each Ingredient.
		(They wont change in the incredient table, so by all means include it in the php for inserts).
	foreach topping in user_selected_toppings
		INSERT INTO Pizza_Toppings (pizzaId, toppingId) VALUES (idOfPizzaWeInserted, idOfToppingOnPizza);

	After all toppings are inserted, you'll need to create a new entry in Order_Details to hold the pizza.
		INSERT INTO Order_Details (orderId, itemId, quantity, pizzaId)
		VALUES (idOfOrder, 1, amountOfDuplicatePizzas, pizzaId);
			orderId: the id that we retrieved from the Order we inserted earlier.
			itemId: this is the itemId as defined in the Item table that represents a purchasable item.
				(itemId for ANY pizza is 1. Check Item table for more info on itemIds)
            quantity: the amount of these identical pizzas ordered.
				(IE:  "I want 3x Large Pizzas with Green Peppers, Mushrooms and Onions") (Yuck)
			pizzaId: the id of the Pizza that we retrieved after we inserted it (Generated by AUTO_INCREMENT)
	
	NOTE: If it isn't completely clear: you need an Order_Detail for every unique TYPE of pizza.
		Where type is defined by the toppings/size of the pizza (or if is a specialty pizza).
		EX: So if I order 2 large pepperoni, 1 small pepperoni and 2 Meat lovers, 
			3 Order_Details will be inserted. 1 for the 2 larg peps, 1 for the small pep, 1 for 2 meat lovers.
	
	***"SPECIALTY PIZZA ORDERS"***
		For Specialty Pizzas, the toppings are predefined and do not matter. The price is already defined.
		We will not be inserting into the Pizza table for Specialty orders.
		We will, however, be creating a Order_Details for the Specialty pizzas ordered.
		Use the above description for creating an Order_Detail for the Specialty pizza.  Pretty straight forward.
			You will either need a list of the indexes of the Specialty pizzas in the Pizzas table
			in your PHP as constants or you'll need to get the ids from the table. (Note, these wont ever change).

	_____________________________________________________________________________
	| You will need to repeat this process for every pizza type that is ordered!|
	-----------------------------------------------------------------------------
</Pizza>

<Item>
Extra purchasable items:
	For any item that isn't a pizza you will need to know their indexes (constant or query Item table),
	and then you'll need to create an Order_Detail for each of these as well.
	
	INSERT INTO Order_Detail (orderId, itemId, costOfSingle, quantity, pizzaId)
	VALUES (orderId, itemId, quantity, 1);
		orderId: explained already in above Order_Detail
		itemId: This should be the id of the item being purchased (refer to Item table for indexes).
        quantity: how many are being purchased? (Explained already)
		pizzaId: Since this isn't a pizza, this is basically meaningless. Set to 1, which references the "Invalid Pizza" entry in Pizza.

	___________________________________________________________________________
	| You will need to repeat this process for every Item type that is ordered!|
	---------------------------------------------------------------------------
</Item>

	After all pizzas and items being purchased are stored in Order_Details, you will need to total the 
	cost of the full order and update the Order in the Orders table.
		UPDATE Orders SET totalCost=cost WHERE orderId=id;
			cost: the total cost of the order (can only store up to 999.99)
			id: the orderId entry that we are updating.
</Order>
